import './style.css'
// Комментарий
// alert('Я JS')
console.log('Я JS') // выводит в консоль "Я JS"

console.log(1 +
  2 +
  4)

// ; ставится только перед квадратными скобками
;[1, 2].forEach(console.log)

/*
  Многострочный
  комментарий
*/

// Многострочный
// комментарий

// Объявили переменную m и присвоили ей значение 1 
let m = 1

// объявили несколько переменных через запятую
// let user = 'John', age = 25, message = 'Hello'
// Но лучше определять переменные на новой строке
let user = 'John'
let age = 25
let message = 'Hello'
console.log('значение переменной user', user)
user = 'Kate'
console.log('значение переменной user', user)
console.log('значение переменной age', age)
console.log('значение переменной message', message)


let hello = 'Hello world!'

// копируем значение 'Hello world' из переменной hello в переменную message
message = hello

// теперь две переменные содержат одинаковые данные
console.log('значение переменной hello', hello) // Hello world!
console.log('значение переменной message', message) // Hello world!

// Невозможно повторно объявить переменную "hello" с областью видимости "Блок"
// let hello

// При обращении к переменной, которая не была создана при помощи let, движок
// пытается найти её в коде выше, и если не находит, выводится ошибка
// Не удается найти имя "newVar"
// newVar = 10

// !Имена переменных
// В JavaScript есть два ограничения, касающиеся имён переменных:

// !Имя переменной должно содержать только буквы, цифры или символы $ и _.
// !Первый символ не должен быть цифрой.
// Примеры допустимых имён:

let userName
let test123
// Если имя содержит несколько слов, обычно используется верблюжья нотация, то есть, слова следуют одно за другим, где каждое следующее слово начинается с заглавной буквы: myVeryLongName.
// Самое интересное – знак доллара '$' и подчёркивание '_' также можно использовать в названиях.Это обычные символы, как и буквы, без какого - либо особого значения.
// Эти имена являются допустимыми:

let $ = 1; // объявили переменную с именем "$"
let _ = 2; // а теперь переменную с именем "_"

console.log($ + _); // 3

// Создали переменную, имя которой начинается на число
// Идентификатор или ключевое слово не может следовать непосредственно за числовым литералом
// let 1a // не может начинаться с цифры
// let my-name // дефис '-' не разрешён в имени (возпринимается как минус)

// Регистр имеет значение
// Переменные с именами apple и APPLE – это две разные переменные.

// Нелатинские буквы разрешены, но не рекомендуются
// Можно использовать любой язык, включая кириллицу или даже иероглифы, например:

let имя = '...'
let 我 = '...'


// !Зарезервированные имена
// Существует список зарезервированных слов, которые нельзя использовать в качестве имён переменных, потому что они используются самим языком.

// Например: let, class, return и function зарезервированы.

// Приведённый ниже код даёт синтаксическую ошибку:

// let let = 5; // нельзя назвать переменную "let", ошибка!
// let return = 5; // также нельзя назвать переменную "return", ошибка!

// Константы
// Чтобы объявить константную, то есть, неизменяемую переменную, используйте const вместо let:

// Объявления "const" должны быть инициализированы (Должно быть присвоено значение)
// const myBirthday1

const myBirthday = '18.04.1982'
$ = 5
// Не удается задать значение для "myBirthday", так как это константа
// myBirthday = ''

// Константы в верхнем регистре
// Широко распространена практика использования констант в качестве псевдонимов для трудно запоминаемых значений, которые известны до начала исполнения скрипта.

// Названия таких констант пишутся с использованием заглавных букв и подчёркивания.

// Например, сделаем константы для различных цветов в «шестнадцатеричном формате»:

const COLOR_RED = "#F00"
const COLOR_GREEN = "#0F0"
const COLOR_BLUE = "#00F"
const COLOR_ORANGE = "#FF7F00"

// ...когда нам нужно выбрать цвет
let color = COLOR_ORANGE
console.log('color',color) // #FF7F00


// !Типы данных
// Значение в JavaScript всегда относится к данным определённого типа.Например, это может быть строка или число.

// Есть восемь основных типов данных в JavaScript.В этой главе мы рассмотрим их в общем, а в следующих главах поговорим подробнее о каждом.

// Когда мы присвоили какое-то значение переменной, тип этого значения сразу привязался к переменной
// Произошла неявная запись 
// let string:string = 'fsddfg'
let string = 'fsddfg'

// имяПеременной:any - такая запись говорит о том, что мы хотим, чтобы переменная хранила любое значение
let newMessage:any = "hello"
// либо мы можем указать после значения переменной as any
let newMessage2 = "hello" as any
newMessage = 123456
newMessage2 = 465

// !Число
let n = 123
n = 12.345

console.log('typeof(n)', typeof(n)) // number
// Числовой тип данных(number) представляет как целочисленные значения, так и числа с плавающей точкой.

// Существует множество операций для чисел, например, умножение *, деление /, сложение +, вычитание - и так далее.

// Кроме обычных чисел, существуют так называемые «специальные числовые значения», которые относятся к этому типу данных: Infinity, -Infinity и NaN.

// Infinity представляет собой математическую бесконечность ∞. Это особое значение, которое больше любого числа.

// Мы можем получить его в результате деления на ноль:

console.log(1 / 0); // Infinity
// Или задать его явно:

console.log(Infinity); // Infinity
// NaN означает вычислительную ошибку.Это результат неправильной или неопределённой математической операции, например:

console.log(("не число" as any) / 2); // NaN, такое деление является ошибкой
// Значение NaN «прилипчиво». Любая математическая операция с NaN возвращает NaN:

console.log(NaN + 1); // NaN
console.log(3 * NaN); // NaN
// @ts-ignore
console.log("не число" / 2 - 1) // NaN
// Если где - то в математическом выражении есть NaN, то оно распространяется на весь результат(есть только одно исключение: NaN ** 0 равно 1).

// !символ "n" в конце означает, что это BigInt
const bigInt = 1234567890123456789012345678901234567890n
console.log('typeof(bigInt)', typeof (bigInt)) // bigint

// !Строка
// Строка (string) в JavaScript должна быть заключена в кавычки.

let str = "Привет dfssdf"
console.log('typeof(str)', typeof (str)) // string
// Предпочтительнее использовать одинарные либо косые кавычки для строк
// Для использования переноса строки в обычной строке, мы можем использовать специальный командный символ
// \n

// Обратная косая черта используется в паре с каким либо знаком в 2х вариантах: для экранирования или передачи командного символа

console.log('Строка с экранированной одинарной кавычкой', '\'')
console.log('Строка с экранированной двойной кавычкой', "\"str\"")
console.log('Обычная строка с\nпереносом строки и\tтабуляцией')

let str2 = 'Одинарные \r\n"кавычки" тоже подойдут It\'s'
// Строки с косыми кавычками поддерживаю перенос строки, а так же позволяют встраивать в себя значения переменных
// Их так же называют шаблонными строками
let phrase = `Обратные ${2+3}
'кавычки' позволяют 
"встраивать" переменные ${str}`

console.log('str2', str2)
console.log('phrase', phrase)

let name = 'Женя'
age = 23

// Такое встраивание хначений в строку называется интерполяцией
console.log(`Привет, меня зовут ${name}.
Мне ${age} лет.
Через месяц мне будет ${age+1}`)

// Объявление пустой строки
let emptyString = ''

// !Булевый(логический) тип
// Булевый тип(boolean) может принимать только два значения: true(истина) и false(ложь).

// Такой тип, как правило, используется для хранения значений да / нет: true значит «да, правильно», а false значит «нет, не правильно».

let nameFieldChecked = true // да, поле отмечено
let ageFieldChecked = false // нет, поле не отмечено
// Булевые значения также могут быть результатом сравнений:

console.log('4 > 1', 4 > 1)
// @ts-ignore
console.log('4 == 2', 4 == 2)
console.log('typeof(true)', typeof (true)) // boolean

// !Значение «null»
// Специальное значение null не относится ни к одному из типов, описанных выше.

// Оно формирует отдельный тип, который содержит только значение null:

let newAge = null
// Тип значения null - null, но typeof возвращает object. Это ошибка typeof, ведущая начало с времён создания JavaScript и сохранённая для совместимости
console.log('typeof(null)', typeof (null)) // object
// В JavaScript null не является «ссылкой на несуществующий объект» или «нулевым указателем», как в некоторых других языках.

// Это просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно».

// В приведённом выше коде указано, что значение переменной age неизвестно.

// !Значение «undefined»
// Специальное значение undefined также стоит особняком.Оно формирует тип из самого себя так же, как и null.

// Оно означает, что «значение не было присвоено».

// Если переменная объявлена, но ей не присвоено никакого значения, то её значением будет undefined:

let ageN

console.log(ageN) // выведет "undefined"
// Технически мы можем присвоить значение undefined любой переменной:

ageN = 123

// изменяем значение на undefined
ageN = undefined

console.log(ageN) // "undefined"
console.log('typeof(undefined)', typeof (undefined)) // undefined
// …Но так делать не рекомендуется.Обычно null используется для присвоения переменной «пустого» или «неизвестного» значения, а undefined – для проверок, была ли переменная назначена.

// !Объекты и символы
// Тип object(объект) – особенный.
console.log('typeof({})', typeof ({})) // object
// Все остальные типы называются «примитивными», потому что их значениями могут быть только простые значения(будь то строка, или число, или что - то ещё).В объектах же хранят коллекции данных или более сложные структуры.

// Объекты занимают важное место в языке и требуют особого внимания.Мы разберёмся с ними в главе Объекты после того, как узнаем больше о примитивах.

// Тип symbol(символ) используется для создания уникальных идентификаторов в объектах.Мы упоминаем здесь о нём для полноты картины, изучим этот тип после объектов.
console.log('typeof(Symbol("id"))', typeof Symbol('id')) // symbol

// Функция не является отдельным типом данных, но typeof возвращает для неё значение function
console.log('typeof(alert)', typeof alert) // function

// В JavaScript есть 8 основных типов данных.

// Семь из них называют «примитивными» типами данных:
// number для любых чисел: целочисленных или чисел с плавающей точкой; целочисленные значения ограничены диапазоном ±(253 - 1).
// bigint для целых чисел произвольной длины.
// string для строк.Строка может содержать ноль или больше символов, нет отдельного символьного типа.
// boolean для true / false.
// null для неизвестных значений – отдельный тип, имеющий одно значение null.
// undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
// symbol для уникальных идентификаторов.
// И один не является «примитивным» и стоит особняком:
// object для более сложных структур данных.
// Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной.

// Имеет две формы: typeof x или typeof (x).
// Возвращает строку с именем типа.Например, "string".
// Для null возвращается "object" – это ошибка в языке, на самом деле это не объект.

// !!!Литералы JavaScript - это фиксированное значение, которое нельзя изменить, вам не нужно указывать какой - либо тип ключевого слова для записи литералов. Литералы часто используются для инициализации переменных в программировании, имена переменных являются строковыми литералами.

let num = 132

// функция alert выводит сообщение на экран, блокируя отображение
// функция prompt запрашивает у пользователя, блокируя отображение
// !Любой пользовательский ввод - это всегда строка!
// !Чтобы преобразовать строку в число, неободимо сделать преобразование
// parseInt - функция, которая достаёт целое число из строки, если эта строка начинается на число
// let input = parseInt(prompt('Введите число','0') as string)

// parseFloat - функция, которая достаёт число c плавающей запятой из строки, если эта строка начинается на число
let input = parseFloat(prompt('Введите число','0') as string)

console.log(input)